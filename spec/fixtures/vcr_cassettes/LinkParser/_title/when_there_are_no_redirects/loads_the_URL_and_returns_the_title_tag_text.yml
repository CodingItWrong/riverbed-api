---
http_interactions:
- request:
    method: get
    uri: http://codingitwrong.com/2017/07/24/letting-people-learn.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Location:
      - https://codingitwrong.com/2017/07/24/letting-people-learn.html
      Server:
      - Netlify
      X-Nf-Request-Id:
      - 01GTJ5XJYM3A941ANY6DT3JC3E
      Date:
      - Thu, 02 Mar 2023 22:08:41 GMT
      Content-Length:
      - '77'
      Content-Type:
      - text/plain; charset=utf-8
    body:
      encoding: UTF-8
      string: Redirecting to https://codingitwrong.com/2017/07/24/letting-people-learn.html
  recorded_at: Thu, 02 Mar 2023 22:08:41 GMT
- request:
    method: get
    uri: https://codingitwrong.com/2017/07/24/letting-people-learn.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Age:
      - '0'
      Cache-Control:
      - public, max-age=0, must-revalidate
      Content-Type:
      - text/html; charset=UTF-8
      Date:
      - Thu, 02 Mar 2023 22:08:41 GMT
      Etag:
      - '"0d337f06f49a2d84464537785f82515f-ssl-df"'
      Server:
      - Netlify
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Accept-Encoding
      X-Nf-Request-Id:
      - 01GTJ5XK2E5HE13VZ8H1WCCTQQ
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 02 Mar 2023 22:08:41 GMT
recorded_with: VCR 6.1.0
