---
http_interactions:
- request:
    method: get
    uri: http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '317'
      Server:
      - GitHub.com
      Content-Type:
      - text/html; charset=utf-8
      Last-Modified:
      - Thu, 26 Mar 2015 22:42:47 GMT
      Access-Control-Allow-Origin:
      - "*"
      Etag:
      - W/"55148b67-13d"
      Expires:
      - Thu, 02 Mar 2023 22:01:43 GMT
      Cache-Control:
      - max-age=600
      X-Proxy-Cache:
      - MISS
      X-Github-Request-Id:
      - D7D4:2EE5:65137:870B0:64011A6F
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 02 Mar 2023 22:08:45 GMT
      Via:
      - 1.1 varnish
      Age:
      - '0'
      X-Served-By:
      - cache-pdk17877-PDK
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1677794926.893358,VS0,VE22
      Vary:
      - Accept-Encoding
      X-Fastly-Request-Id:
      - ee18571dd3fbbe1e8545222c66255231e323c408
    body:
      encoding: ASCII-8BIT
      string: |2
              <!DOCTYPE html>
              <html>
              <head>
              <link rel="canonical" href="/JavaScript-Scoping-and-Hoisting.html"/>
              <meta http-equiv="content-type" content="text/html; charset=utf-8" />
              <meta http-equiv="refresh" content="0;url=/JavaScript-Scoping-and-Hoisting.html" />
              </head>
              </html>
  recorded_at: Thu, 02 Mar 2023 22:08:45 GMT
- request:
    method: get
    uri: http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '20643'
      Server:
      - GitHub.com
      Content-Type:
      - text/html; charset=utf-8
      Last-Modified:
      - Thu, 26 Mar 2015 22:42:47 GMT
      Access-Control-Allow-Origin:
      - "*"
      Etag:
      - W/"55148b67-50a3"
      Expires:
      - Thu, 02 Mar 2023 22:01:43 GMT
      Cache-Control:
      - max-age=600
      X-Proxy-Cache:
      - MISS
      X-Github-Request-Id:
      - 7ACA:6A88:5A8D3:76BD2:64011A6F
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 02 Mar 2023 22:08:46 GMT
      Via:
      - 1.1 varnish
      Age:
      - '0'
      X-Served-By:
      - cache-pdk17834-PDK
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1677794926.980712,VS0,VE22
      Vary:
      - Accept-Encoding
      X-Fastly-Request-Id:
      - 9cc35ef6ced0580fad2db0e16398bf2c804a0ea4
    body:
      encoding: ASCII-8BIT
      string: "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\"
        />\n    <title>JavaScript Scoping and Hoisting</title>\n\n    <!-- CSS, including
        Blueprint, jQuery w/Smoothness, and AG CSS -->\n    <link rel=\"stylesheet\"
        href=\"/css/blueprint/blueprint.min.css\" media=\"screen, projection\" />\n
        \   <link rel=\"stylesheet\" href=\"/css/blueprint/print.min.css\" media=\"print\"
        />\n    <!--[if lt IE 8]>\n      <link rel=\"stylesheet\" href=\"/css/blueprint/ie.min.css\"
        media=\"screen, projection\">\n    <![endif]-->\n    <link rel=\"stylesheet\"
        href=\"/css/ag.css\" media=\"screen\" />\n\n    <!-- Extra <head> Links -->\n
        \   <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Adequately
        Good Atom Feed\" href=\"http://www.adequatelygood.com/feeds/atom.xml\" />\n\n
        \   <!-- TODO: favicon -->\n\n    <!-- IE HTML5 Compatibility -->\n    <!--[if
        IE]>\n      <script type=\"text/javascript\">\n        (function () {\n          var
        tags = \"header hgroup nav article time footer\".split(\" \"),\n            i
        = 0,\n            l = tags.length;\n          for (; i < l; i += 1) {\n            document.createElement(tags[i]);\n
        \         }\n        }());\n      </script>\n    <![endif]-->\n  </head>\n
        \ <body>\n    <a name=\"top\"></a>\n    <div id=\"container\" class=\"container\">\n\n
        \     <!-- Header -->\n      <header class=\"span-24 last\">\n        <!--
        Title -->\n        <div id=\"title\" class=\"span-24 last\">\n          <div
        class=\"span-17 colborder prepend-top append-bottom\">\n            <hgroup>\n
        \             <h1>\n                <a href=\"/\">adequately good</a>\n              </h1>\n
        \             <h3 class=\"prepend-2 alt\">decent programming advice</h3>\n
        \           </hgroup>\n          </div>\n          <div class=\"span-6 last
        prepend-top append-bottom\">\n            <h2>\n              written by\n
        \             <a href=\"http://twitter.com/bcherry\">ben cherry</a>\n            </h2>\n
        \         </div>\n        </div>\n\n        <hr />\n\n        <!-- Navigation
        Bar -->\n        <nav class=\"prepend-2 span-20 append-2 last append-bottom\">\n
        \         <div class=\"span-5\">\n            <a href=\"/\">home</a>\n          </div>\n
        \         <div class=\"span-5\">\n            <a href=\"#\" id=\"archiveLink\">archives</a>\n
        \         </div>\n          <div class=\"span-5\">\n            <a href=\"/about.html\">about</a>\n
        \         </div>\n          <div class=\"span-5 last\">\n            <a href=\"/feeds/atom.xml\">feed</a>\n
        \         </div>\n        </nav>\n\n        <!-- Archives Links -->\n        <div
        id=\"archives\" class=\"span-24 last smallalts\">\n          <hr />\n          <div
        class=\"archivelinks\">\n            <span class=\"alt\">posts by year</span>\n
        \           \n              \n              \n              \n            \n
        \             \n              \n              \n            \n              \n
        \             \n              \n            \n              \n              \n
        \             \n            \n              \n              \n              \n
        \           \n              \n              \n              \n                <a
        class=\"tight\" href=\"/2009\">2009</a>\n              \n            \n              \n
        \             \n              \n            \n              \n              \n
        \             \n            \n              \n              \n              \n
        \           \n              \n              \n              \n            \n
        \             \n              \n              \n            \n              \n
        \             \n              \n            \n              \n              \n
        \             \n            \n              \n              \n              \n
        \           \n              \n              \n              \n            \n
        \             \n              \n              \n            \n              \n
        \             \n              \n            \n              \n              \n
        \             \n            \n              \n              \n              \n
        \           \n              \n              \n              \n            \n
        \             \n              \n              \n            \n              \n
        \             \n              \n                <a class=\"tight\" href=\"/2010\">2010</a>\n
        \             \n            \n              \n              \n              \n
        \           \n              \n              \n              \n                <a
        class=\"tight\" href=\"/2011\">2011</a>\n              \n            \n          </div>\n
        \       </div>\n\n        <hr />\n      </header>\n\n      <div id=\"colcontainer\"
        class=\"span-24 last\">\n        <!-- Main content: Posts, etc. -->\n        <div
        id=\"content\" class=\"span-17 colborder\">\n          <a name=\"main\"></a>\n
        \         \n<article class=\"span-17 last\">\n  <header class=\"span-17 last\">\n
        \ \n    <time class=\"alt\" datetime=\"2010-02-08\" pubdate>2010-02-08</time>\n
        \ \n  <h1><a href=\"/JavaScript-Scoping-and-Hoisting.html\">JavaScript Scoping
        and Hoisting</a></h1>\n</header>\n  <div id=\"blogbody\" class=\"span-17 last
        entry\">\n    <p>Do you know what value will be alerted if the following is
        executed as a JavaScript program?</p>\n\n<pre><code>var foo = 1;\nfunction
        bar() {\n\tif (!foo) {\n\t\tvar foo = 10;\n\t}\n\talert(foo);\n}\nbar();</code></pre>\n\n<p>If
        it surprises you that the answer is &#8220;10&#8221;, then this one will probably
        really throw you for a loop:</p>\n\n<pre><code>var a = 1;\nfunction b() {\n\ta
        = 10;\n\treturn;\n\tfunction a() {}\n}\nb();\nalert(a);</code></pre>\n\n<p>Here,
        of course, the browser will alert &#8220;1&#8221;. So what&#8217;s going on
        here? While it might seem strange, dangerous, and confusing, this is actually
        a powerful and expressive feature of the language. I don&#8217;t know if there
        is a standard name for this specific behavior, but I&#8217;ve come to like
        the term &#8220;hoisting&#8221;. This article will try to shed some light
        on this mechanism, but first lets take a necessary detour to understand JavaScript&#8217;s
        scoping.</p>\n\n<h2 id='scoping_in_javascript'>Scoping in JavaScript</h2>\n\n<p>One
        of the sources of most confusion for JavaScript beginners is scoping. Actually,
        it&#8217;s not just beginners. I&#8217;ve met a lot of experienced JavaScript
        programmers who don&#8217;t fully understand scoping. The reason scoping is
        so confusing in JavaScript is because it looks like a C-family language. Consider
        the following C program:</p>\n\n<pre><code>#include &lt;stdio.h&gt;\nint main()
        {\n\tint x = 1;\n\tprintf(&quot;%d, &quot;, x); // 1\n\tif (1) {\n\t\tint
        x = 2;\n\t\tprintf(&quot;%d, &quot;, x); // 2\n\t}\n\tprintf(&quot;%d\\n&quot;,
        x); // 1\n}</code></pre>\n\n<p>The output from this program will be <code>1,
        2, 1</code>. This is because C, and the rest of the C family, has <strong>block-level
        scope</strong>. When control enters a block, such as the <code>if</code> statement,
        new variables can be declared within that scope, without affecting the outer
        scope. This is not the case in JavaScript. Try the following in Firebug:</p>\n\n<pre><code>var
        x = 1;\nconsole.log(x); // 1\nif (true) {\n\tvar x = 2;\n\tconsole.log(x);
        // 2\n}\nconsole.log(x); // 2</code></pre>\n\n<p>In this case, Firebug will
        show <code>1, 2, 2</code>. This is because JavaScript has <strong>function-level
        scope</strong>. This is radically different from the C family. Blocks, such
        as <code>if</code> statements, <strong>do not</strong> create a new scope.
        Only functions create a new scope.</p>\n\n<p>To a lot of programmers who are
        used to languages like C, C++, C#, or Java, this is unexpected and unwelcome.
        Luckily, because of the flexibility of JavaScript functions, there is a workaround.
        If you must create temporary scopes within a function, do the following:</p>\n\n<pre><code>function
        foo() {\n\tvar x = 1;\n\tif (x) {\n\t\t(function () {\n\t\t\tvar x = 2;\n\t\t\t//
        some other code\n\t\t}());\n\t}\n\t// x is still 1.\n}</code></pre>\n\n<p>This
        method is actually quite flexible, and can be used anywhere you need a temporary
        scope, not just within block statements. However, I strongly recommend that
        you take the time to really understand and appreciate JavaScript scoping.
        It&#8217;s quite powerful, and one of my favorite features of the language.
        If you understand scoping, hoisting will make a lot more sense to you.</p>\n\n<h2
        id='declarations_names_and_hoisting'>Declarations, Names, and Hoisting</h2>\n\n<p>In
        JavaScript, a name enters a scope in one of four basic ways:</p>\n\n<ol>\n<li><strong>Language-defined:</strong>
        All scopes are, by default, given the names <code>this</code> and <code>arguments</code>.</li>\n\n<li><strong>Formal
        parameters:</strong> Functions can have named formal parameters, which are
        scoped to the body of that function.</li>\n\n<li><strong>Function declarations:</strong>
        These are of the form <code>function foo() {}</code>.</li>\n\n<li><strong>Variable
        declarations:</strong> These take the form <code>var foo;</code>.</li>\n</ol>\n\n<p>Function
        declarations and variable declarations are always moved (&#8220;hoisted&#8221;)
        invisibly to the top of their containing scope by the JavaScript interpreter.
        Function parameters and language-defined names are, obviously, already there.
        This means that code like this:</p>\n\n<pre><code>function foo() {\n\tbar();\n\tvar
        x = 1;\n}</code></pre>\n\n<p>is actually interpreted like this:</p>\n\n<pre><code>function
        foo() {\n\tvar x;\n\tbar();\n\tx = 1;\n}</code></pre>\n\n<p>It turns out that
        it doesn&#8217;t matter whether the line that contains the declaration would
        ever be executed. The following two functions are equivalent:</p>\n\n<pre><code>function
        foo() {\n\tif (false) {\n\t\tvar x = 1;\n\t}\n\treturn;\n\tvar y = 1;\n}\nfunction
        foo() {\n\tvar x, y;\n\tif (false) {\n\t\tx = 1;\n\t}\n\treturn;\n\ty = 1;\n}</code></pre>\n\n<p>Notice
        that the assignment portion of the declarations were not hoisted. Only the
        name is hoisted. This is not the case with function declarations, where the
        entire function body will be hoisted as well. But remember that there are
        two normal ways to declare functions. Consider the following JavaScript:</p>\n\n<pre><code>function
        test() {\n\tfoo(); // TypeError &quot;foo is not a function&quot;\n\tbar();
        // &quot;this will run!&quot;\n\tvar foo = function () { // function expression
        assigned to local variable &#39;foo&#39;\n\t\talert(&quot;this won&#39;t run!&quot;);\n\t}\n\tfunction
        bar() { // function declaration, given the name &#39;bar&#39;\n\t\talert(&quot;this
        will run!&quot;);\n\t}\n}\ntest();</code></pre>\n\n<p>In this case, only the
        function declaration has its body hoisted to the top. The name &#8216;foo&#8217;
        is hoisted, but the body is left behind, to be assigned during execution.</p>\n\n<p>That
        covers the basics of hoisting, which is not as complex or confusing as it
        seems. Of course, this being JavaScript, there is a little more complexity
        in certain special cases.</p>\n\n<h3 id='name_resolution_order'>Name Resolution
        Order</h3>\n\n<p>The most important special case to keep in mind is name resolution
        order. Remember that there are four ways for names to enter a given scope.
        The order I listed them above is the order they are resolved in. In general,
        if a name has already been defined, it is never overridden by another property
        of the same name. This means that a function declaration takes priority over
        a variable declaration. This does not mean that an assignment to that name
        will not work, just that the declaration portion will be ignored. There are
        a few exceptions:</p>\n\n<ul>\n<li>The built-in name <code>arguments</code>
        behaves oddly. It seems to be declared following the formal parameters, but
        before function declarations. This means that a formal parameter with the
        name <code>arguments</code> will take precedence over the built-in, even if
        it is undefined. This is a bad feature. Don&#8217;t use the name <code>arguments</code>
        as a formal parameter.</li>\n\n<li>Trying to use the name <code>this</code>
        as an identifier anywhere will cause a SyntaxError. This is a good feature.</li>\n\n<li>If
        multiple formal parameters have the same name, the one occurring latest in
        the list will take precedence, even if it is undefined.</li>\n</ul>\n\n<h3
        id='named_function_expressions'>Named Function Expressions</h3>\n\n<p>You
        can give names to functions defined in function expressions, with syntax like
        a function declaration. This does not make it a function declaration, and
        the name is not brought into scope, nor is the body hoisted. Here&#8217;s
        some code to illustrate what I mean:</p>\n\n<pre><code>foo(); // TypeError
        &quot;foo is not a function&quot;\nbar(); // valid\nbaz(); // TypeError &quot;baz
        is not a function&quot;\nspam(); // ReferenceError &quot;spam is not defined&quot;\n\nvar
        foo = function () {}; // anonymous function expression (&#39;foo&#39; gets
        hoisted)\nfunction bar() {}; // function declaration (&#39;bar&#39; and the
        function body get hoisted)\nvar baz = function spam() {}; // named function
        expression (only &#39;baz&#39; gets hoisted)\n\nfoo(); // valid\nbar(); //
        valid\nbaz(); // valid\nspam(); // ReferenceError &quot;spam is not defined&quot;</code></pre>\n\n<h2
        id='how_to_code_with_this_knowledge'>How to Code With This Knowledge</h2>\n\n<p>Now
        that you understand scoping and hoisting, what does that mean for coding in
        JavaScript? The most important thing is to always declare your variables with
        a <code>var</code> statement. I <strong>strongly</strong> recommend that you
        have <em>exactly one</em> <code>var</code> statement per scope, and that it
        be at the top. If you force yourself to do this, you will never have hoisting-related
        confusion. However, doing this can make it hard to keep track of which variables
        have actually been declared in the current scope. I recommend using <a href='http://www.jslint.com'
        target='_blank'>JSLint</a> with the <code>onevar</code> option to enforce
        this. If you&#8217;ve done all of this, your code should look something like
        this:</p>\n\n<pre><code>/*jslint onevar: true [...] */\nfunction foo(a, b,
        c) {\n    var x = 1,\n    \tbar,\n    \tbaz = &quot;something&quot;;\n}</code></pre>\n\n<h2
        id='what_the_standard_says'>What the Standard Says</h2>\n\n<p>I find that
        it&#8217;s often useful to just consult the <a href='http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf'
        target='_blank'>ECMAScript Standard (pdf)</a> directly to understand how these
        things work. Here&#8217;s what it has to say about variable declarations and
        scope (section 12.2.2 in the older version):</p>\n\n<blockquote>\n<p>If the
        variable statement occurs inside a FunctionDeclaration, the variables are
        defined with function-local scope in that function, as described in section
        10.1.3. Otherwise, they are defined with global scope (that is, they are created
        as members of the global object, as described in section 10.1.3) using property
        attributes { DontDelete }. Variables are created when the execution scope
        is entered. A Block does not define a new execution scope. Only Program and
        FunctionDeclaration produce a new scope. Variables are initialised to undefined
        when created. A variable with an Initialiser is assigned the value of its
        AssignmentExpression when the VariableStatement is executed, not when the
        variable is created.</p>\n</blockquote>\n\n<p>I hope this article has shed
        some light on one of the most common sources of confusion to JavaScript programmers.
        I have tried to be as thorough as possible, to avoid creating more confusion.
        If I have made any mistakes or have large omissions, please let me know.</p>\n
        \ </div>\n</article>\n\n<div id=\"more_reading\" class=\"span-17 last\">\n
        \ <p class=\"smallalts tags\">\n    <span class=\"alt\">filed under</span>
        <a class=\"tight\" href=\"/tag/javascript\">javascript</a>\n  </p>\n</div>\n\n<div
        id=\"comments_wrapper\" class=\"span-17 last\">\n  <div id=\"disqus_thread\"></div>\n
        \ <script type=\"text/javascript\">\n      var disqus_shortname = 'adequatelygood';\n
        \     var disqus_identifier = \"http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting\";\n
        \     var disqus_title = \"JavaScript Scoping and Hoisting\";\n      var disqus_url
        = \"http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html\";\n\n
        \     /* * * DON'T EDIT BELOW THIS LINE * * */\n      (function() {\n          var
        dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async
        = true;\n          dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';\n
        \         (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n
        \     })();\n  </script>\n  <noscript>\n    <a href=\"http://disqus.com/forums/adequatelygood/?url=ref\">View
        the discussion thread.</a>\n  </noscript>\n</div>\n\n        </div>\n\n        <!--
        Sidebar: Search, links, etc. -->\n        <div id=\"sidebar\" class=\"span-6
        last\">\n          <hr class=\"space\" />\n\n          <div id=\"links\">\n
        \           <h3>the author</h3>\n            <p>\n              Ben is a 25
        year-old software engineer. He lives and works in San Francisco. Many people
        think he invented the term \"hoisting\" in JavaScript, but this is untrue.\n
        \           </p>\n            <ul>\n              <li><a href=\"http://twitter.com/bcherry\">Twitter</a>
        - @<a class=\"twitter-anywhere-user\" href=\"http://twitter.com/bcherry\">bcherry</a></li>\n
        \             <li><a href=\"http://github.com/bcherry\">GitHub</a> - My Code</li>\n
        \             <li><a href=\"http://www.linkedin.com/in/bcherryprogrammer\">LinkedIn</a>
        - Professional Profile</li>\n              <li><a href=\"http://www.facebook.com/bcherry\">Facebook</a>
        - That Other Social Network</li>\n              <li><a href=\"http://www.bcherry.net/talks/\">Presentations</a>
        - Slides From My Talks</li>\n            </ul>\n            <iframe allowtransparency=\"true\"
        frameborder=\"0\" scrolling=\"no\"\n              src=\"http://platform.twitter.com/widgets/follow_button.html?screen_name=bcherry&amp;button=grey&amp;text_color=7F7F7F&amp;link_color=666666\"\n
        \             style=\"width:300px; height:20px;\"></iframe>\n          </div>\n\n
        \         <hr />\n\n          <div id=\"tags\">\n            <h3>categories</h3>\n
        \           <ul>\n            \n              <li>\n                <a href=\"/tag/javascript\">javascript</a>\n
        \               (21)\n              </li>\n            \n              <li>\n
        \               <a href=\"/tag/social%20gaming\">social gaming</a>\n                (1)\n
        \             </li>\n            \n              <li>\n                <a
        href=\"/tag/css\">css</a>\n                (1)\n              </li>\n            \n
        \             <li>\n                <a href=\"/tag/jquery\">jquery</a>\n                (2)\n
        \             </li>\n            \n              <li>\n                <a
        href=\"/tag/performance\">performance</a>\n                (5)\n              </li>\n
        \           \n              <li>\n                <a href=\"/tag/tools\">tools</a>\n
        \               (2)\n              </li>\n            \n              <li>\n
        \               <a href=\"/tag/html5\">html5</a>\n                (3)\n              </li>\n
        \           \n              <li>\n                <a href=\"/tag/adequatelygood\">adequatelygood</a>\n
        \               (1)\n              </li>\n            \n              <li>\n
        \               <a href=\"/tag/timers\">timers</a>\n                (2)\n
        \             </li>\n            \n              <li>\n                <a
        href=\"/tag/module%20pattern\">module pattern</a>\n                (3)\n              </li>\n
        \           \n              <li>\n                <a href=\"/tag/talks\">talks</a>\n
        \               (1)\n              </li>\n            \n              <li>\n
        \               <a href=\"/tag/slide\">slide</a>\n                (1)\n              </li>\n
        \           \n              <li>\n                <a href=\"/tag/python\">python</a>\n
        \               (1)\n              </li>\n            \n              <li>\n
        \               <a href=\"/tag/debugging\">debugging</a>\n                (1)\n
        \             </li>\n            \n              <li>\n                <a
        href=\"/tag/testing\">testing</a>\n                (2)\n              </li>\n
        \           \n              <li>\n                <a href=\"/tag/hashbang\">hashbang</a>\n
        \               (1)\n              </li>\n            \n            </ul>\n
        \         </div>\n\n          <hr />\n\n          \n        </div>\n      </div>\n
        \   </div>\n\n    <script>\n      (function() {\n        var archiveLink =
        document.getElementById(\"archiveLink\"),\n            archives = document.getElementById(\"archives\");\n\n
        \       archiveLink.onclick = function() {\n          if (archives.className.match(/\\bexpanded\\b/))
        {\n            archives.className = archives.className.replace(/\\bexpanded\\b/g,
        '');\n          } else {\n            archives.className += ' expanded';\n
        \         }\n          return false;\n        };\n      }());\n    </script>\n\n
        \   <!-- Google Analytics -->\n    <script type=\"text/javascript\">var _gaq
        =_gaq||[]; _gaq.push(['_setAccount','UA-251077-4']);_gaq.push(['_trackPageview']);(function(){var
        ga=document.createElement('script');ga.type='text/javascript';ga.async=true;ga.src=('https:'==document.location.protocol?'https://ssl':'http://www')+'.google-analytics.com/ga.js';(document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(ga);})();</script>\n
        \ </body>\n</html>\n"
  recorded_at: Thu, 02 Mar 2023 22:08:45 GMT
recorded_with: VCR 6.1.0
